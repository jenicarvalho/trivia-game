{"version":3,"sources":["App.styles.tsx","components/Headline/Headline.styles.tsx","components/Headline/index.tsx","components/Headline/Headline.tsx","pages/Home/home.styles.tsx","pages/Home/index.tsx","components/Card/Card.styles.tsx","components/Card/index.tsx","components/Card/Card.tsx","components/Breadcrumb/index.tsx","components/Breadcrumb/Breadcrumb.tsx","components/Loader/Loader.styles.tsx","components/Loader/index.tsx","components/Loader/Loader.tsx","components/Button/Button.styles.tsx","components/Button/index.tsx","components/Button/Button.tsx","pages/Quiz/quiz.styles.tsx","store/ducks/questions/types.ts","store/ducks/questions/actions.ts","store/ducks/answers/types.ts","store/ducks/answers/actions.ts","pages/Quiz/index.tsx","pages/Result/result.styles.tsx","store/ducks/playAgain/types.ts","store/ducks/playAgain/actions.ts","pages/Result/index.tsx","routes/routes.tsx","routes/index.tsx","store/ducks/questions/index.ts","store/ducks/answers/index.ts","store/ducks/playAgain/index.ts","store/ducks/rootReducer.ts","services/api.ts","services/questions-service.ts","store/ducks/questions/sagas.ts","store/ducks/rootSaga.ts","store/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Main","styled","H1","h1","Headline","props","children","border","Container","div","Explanation","CTA","Home","to","Card","Breadcrumb","Loader","button","answer","css","Button","rest","QuestionsTypes","Content","ButtonsGroup","AnswersTypes","Quiz","dispatch","useDispatch","useSelector","state","questions","loadingQuestions","history","useHistory","useState","questionIndex","setQuestionIndex","answersArray","setAnswersArray","questionsLength","data","results","length","useEffect","action","GET_QUESTIONS_REQUEST","setAnswer","answers","question","correct_answer","correct","Boolean","JSON","parse","toLowerCase","pusherAnswer","currentAnswer","push","SET_ANSWERS","nextQuestion","responseCode","AllHtmlEntities","decode","category","onClick","ResetTypes","AnswersList","ul","AnswerItem","li","color","Result","quantityCorrect","AnswersResult","filter","playAgain","RESET_GAME","map","createBrowserHistory","Routes","path","exact","component","INITIAL_STATE","reducer","type","GET_QUESTIONS_SUCCESS","payload","GET_QUESTIONS_FAILURE","loadingAnswers","GET_ANSWERS","reset","createRootReducer","combineReducers","api","axios","create","baseURL","QuestionsService","getQuestions","http","get","call","response","put","console","log","rootSaga","all","takeLatest","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","store","createStore","applyMiddleware","run","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ae8d02d.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    --purple: #7042a9;\n    --yellow: #ffdd01;\n    --gray: #595958;\n    --green: #00d400;\n    --greenMedium: #00a000;\n    --greenDark: #077d07;\n    --greenDarker: #016701;\n    --red: #ff5800;\n    --redMedium: #ef0909;\n    --redDark: #b30000;\n    --redDarker: #8c0202;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n  }\n  body {\n    font-family: 'Dosis', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    color: #fff;\n    background: var(--purple);\n    background: -moz-linear-gradient(90deg, rgba(84,21,160,0.9) 29%, rgba(143,52,255,1) 71%, rgba(176,140,221,1) 100%);\n    background: -webkit-linear-gradient(90deg, rgba(84,21,160,0.9) 29%, rgba(143,52,255,1) 71%, rgba(176,140,221,1) 100%);\n    background: linear-gradient(90deg, rgba(84,21,160,0.9) 29%, rgba(143,52,255,1) 71%, rgba(176,140,221,1) 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#5415a2\",endColorstr=\"#b08cdd\",GradientType=1);\n  }\n\n  button, a {\n    text-decoration: none;\n    border: none;\n    padding: 10px 20px;\n    font-size: 25px;\n    border-radius: 100%;\n    font-family: 'Nerko One';\n    background: var(--redMedium);\n    color: #fff;\n    font-weight: 100;\n    margin-top: 20px;\n    cursor: pointer;\n    outline: none;\n    box-shadow: 0 6px 0 var(--redDark);\n\n    &:hover {\n      background: var(--redDark);\n      box-shadow: 0 6px 0 var(--redDarker);\n    }\n\n    &:active {\n      position: relative;\n      top: 6px;\n      box-shadow: 0 0px 0 var(--redDark);\n      background: var(--redDark);\n    }\n  }\n\n  hr {    \n    width: 200px;\n    opacity: 0.2;\n  }\n`;\n\nconst Main = styled('main')`\n  background: rgb(255 255 255 / 3%);\n  margin: 10px auto;\n  border-radius: 20px;\n  border: 1px solid rgb(255 255 255 / 8%);\n  box-shadow: 1px 1px 20px rgb(0 0 0 / 10%);\n  display: flex; \n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  max-width: 600px;\n  height: 95vh;\n  padding: 50px;\n`\n\nexport {\n  GlobalStyle,\n  Main\n}","import styled from 'styled-components';\n\nexport const H1 = styled.h1`\n  font-family: 'Nerko One', cursive;\n  font-size: 50px;\n  line-height: 45px;\n  text-align: center;\n  font-weight: 100;\n  padding-bottom: 15px;\n`;\n","import Headline from './Headline';\n\nexport default Headline;","import React from 'react'\nimport { H1 } from './Headline.styles'\n\ninterface Props {\n  children: any,\n  border?: boolean\n}\n\nconst Headline = (props: Props) => {\nreturn (\n  <>\n    <H1>{props.children}</H1>\n    { props.border && <hr />}\n  </>\n)\n}\n\nexport default Headline","import styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  justify-content: space-evenly;\n  text-align: center;\n`;\n\nconst Explanation = styled.div`\n  font-size: 30px;\n  margin: 20px auto;\n  color: rgba(255,255,255,0.5);\n  max-width: 350px;\n\n  strong { text-transform: uppercase }\n\n  strong:first-child {\n    color: var(--green);\n  }\n  strong:last-child {\n    color: var(--red);\n  }\n`;\n\nconst CTA = styled.div`\n  font-size: 20px;\n  margin: 0;\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n\n  p {\n    margin-right: 20px;\n  }\n`;\n\nexport {\n  Explanation,\n  Container,\n  CTA\n}\n","import React from 'react'\nimport Headline from '../../components/Headline'\nimport { Container, Explanation, CTA } from './home.styles'\nimport { Link } from 'react-router-dom'\n\nconst Home = () => {\n  return (\n    <Container>\n      <Headline>\n        Welcome to the Trivia Challenge!\n      </Headline>\n      <Explanation>\n        You will be presented with 10 <strong>True</strong> or <strong>False</strong> questions.\n      </Explanation>\n      <CTA>\n        <p>Can you score 100%?</p>\n        <Link to=\"/quiz\">\n          Begin\n        </Link>\n      </CTA>\n    </Container>  \n  )\n}\n\nexport default Home","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  font-size: 20px;\n  line-height: 30px;\n  text-align: center;\n  letter-spacing: 0.5px;\n  opacity: 0.7;\n`;\n","import Card from './Card'\n\nexport default Card","import React from 'react'\nimport { Container } from './Card.styles'\n\ninterface Props {\n  children: string\n}\n\nconst Card = (props: Props) => {\n  return <Container>{props.children}</Container>\n}\n\nexport default Card","import Breadcrumb from './Breadcrumb'\n\nexport default Breadcrumb","import React from 'react'\n\ninterface Props {\n  children: string\n}\n\nconst Breadcrumb = (props: Props) => {\nreturn <div>{props.children}</div>\n}\n\nexport default Breadcrumb","import styled from 'styled-components';\n\nexport const H1 = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 90vh;\n  width: 500px;\n  font-size: 60px;\n  font-family: 'Nerko One';\n`;\n","import Loader from './Loader'\n\nexport default Loader","import React from 'react'\n\nimport { H1 } from './Loader.styles'\n\nconst Loader = () => {\n  return <H1>Loading...</H1> \n}\n\nexport default Loader","import styled, { css } from 'styled-components'\n\ninterface ButtonStyled {\n  answer?: boolean;\n}\n\nconst Container = styled.button<ButtonStyled>`\n  border: none;\n  padding: 10px 20px;\n  font-size: 25px;\n  border-radius: 100%;\n  font-family: 'Nerko One';\n  color: #fff;\n  font-weight: 100;\n  margin-top: 20px;\n  cursor: pointer;\n  outline: none;\n\n  ${props => props.answer && css`\n    background: var(--green);\n    box-shadow: 0 6px 0 var(--greenDark);\n\n    &:hover,\n    &:active  {\n      background: var(--greenMedium);\n      box-shadow: 0 6px 0 var(--greenDarker);\n    }\n  `}\n\n  ${props => !props.answer && css`\n    background: var(--red);\n    box-shadow: 0 6px 0 var(--redDark);\n\n    &:hover,\n    &:active  {\n      background: var(--redMedium);\n      box-shadow: 0 6px 0 var(--redDarker);\n    }\n  `}\n\n  &:active {\n    position: relative;\n    top: 6px;\n    box-shadow: 0 0px 0 transparent;\n  }\n\n`;\n\nexport {\n  Container\n}","import Button from './Button'\n\nexport default Button","import { Container } from './Button.styles'\n\ninterface Props {\n  children: string,\n  answer?: boolean,\n  onClick?: any\n}\n\nconst Button = (props: Props) => {\n  const { children, answer, ...rest } = props\n  return   <Container answer={answer} {...rest}>{children}</Container>\n}\n\nexport default Button","import styled from 'styled-components';\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  height: 90vh;\n  flex-direction: column;\n`;\n\nconst ButtonsGroup = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n`;\n\nexport {\n  Content,\n  ButtonsGroup\n}","/**\n * Action Types\n */\nexport enum QuestionsTypes {\n  GET_QUESTIONS_REQUEST = '@questions/GET_QUESTIONS_REQUEST',\n  GET_QUESTIONS_SUCCESS = '@questions/GET_QUESTIONS_SUCCESS',\n  GET_QUESTIONS_FAILURE = '@questions/GET_QUESTIONS_FAILURE',\n}\n\n/**\n * Data Types\n */\nexport interface Question {\n  category: string,\n  type: string,\n  difficulty: string,\n  question: string,\n  correct_answer: string,\n  incorrect_answers: Array<boolean>\n}\n\nexport interface QuestionsResponse {\n  responseCode: number,\n  results: Array<Question>\n}\n\n/**\n * State Type\n */\nexport interface QuestionsState {\n  readonly data: QuestionsResponse\n  readonly loadingQuestions: boolean\n}\n","import { action } from \"typesafe-actions\"\nimport { QuestionsTypes, QuestionsResponse } from \"./types\"\n\nexport const loadQuestionsRequest = () => action(QuestionsTypes.GET_QUESTIONS_REQUEST)\nexport const loadQuestionsSuccess = (data: QuestionsResponse) => action(QuestionsTypes.GET_QUESTIONS_SUCCESS, data)\nexport const loadQuestionsFailure = () => action(QuestionsTypes.GET_QUESTIONS_FAILURE)\n","/**\n * Action Types\n */\nexport enum AnswersTypes {\n  SET_ANSWERS = '@answers/SET_ANSWERS',\n  GET_ANSWERS = '@answers/GET_ANSWERS'\n}\n\n/**\n * Data Types\n */\nexport interface Answers {\n  question: string,\n  correct: boolean\n}\n\nexport interface AnswerResponse {\n  AnswersResult: Array<Answers>\n}\n\n/**\n * State Type\n */\nexport interface AnswerState {\n  readonly data: AnswerResponse\n  readonly loadingAnswers: boolean\n}\n","import { action } from \"typesafe-actions\"\nimport { AnswersTypes, Answers } from \"./types\"\n\nexport const setAnswers = (answers: Answers) => action(AnswersTypes.SET_ANSWERS, answers)\nexport const getAnswers = (answers: Answers) => action(AnswersTypes.GET_ANSWERS, answers)\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AllHtmlEntities } from 'html-entities'\n\nimport { useHistory } from \"react-router-dom\"\n\nimport Headline from '../../components/Headline'\nimport Card from '../../components/Card'\nimport Breadcrumb from '../../components/Breadcrumb'\nimport Loader from '../../components/Loader'\nimport Button from '../../components/Button'\n\nimport { Content, ButtonsGroup } from './quiz.styles'\nimport * as QuestionsActions from '../../store/ducks/questions/actions'\nimport * as AnswersActions from '../../store/ducks/answers/actions'\nimport { ApplicationState } from '../../store'\n\nconst Quiz = () => {\n\n  const dispatch = useDispatch();\n\n  const { questions, loadingQuestions } = useSelector((state: ApplicationState) => ({\n    questions: state.questions,\n    loadingQuestions: state.questions.loadingQuestions\n  }));\n\n  const history = useHistory()\n\n  const [questionIndex, setQuestionIndex] = useState(0)\n  const [answersArray, setAnswersArray] = useState([])\n\n  const questionsLength = questions.data.results.length\n\n  useEffect(() =>{\n    dispatch(QuestionsActions.loadQuestionsRequest())\n  }, [])\n\n  const setAnswer = (answer: boolean) => {\n\n    let { question, correct_answer } = questions.data.results[questionIndex]\n    \n    let correct = Boolean(JSON.parse(correct_answer.toLowerCase())) === answer ? true : false\n\n    let pusherAnswer: any = answersArray\n    let currentAnswer = { question, correct}\n    pusherAnswer.push(currentAnswer)\n\n    setAnswersArray(pusherAnswer)\n\n    dispatch(AnswersActions.setAnswers(pusherAnswer))\n\n    nextQuestion()\n  }\n\n  const nextQuestion = () => {\n    if(questionIndex < questionsLength - 1) {\n      setQuestionIndex(questionIndex + 1)\n    } else {\n      history.push(`/result`);\n    }\n  }\n\n\n  return (\n    <> \n      { loadingQuestions ? <Loader /> :\n      \n      <Content>\n        { questions.data.responseCode === 0 ?  <h1>Sorry, something went wrong!</h1> :\n        <>\n          <Headline border={true}>\n            { AllHtmlEntities.decode(questions.data.results[questionIndex].category) }\n          </Headline>\n          <Card>\n            { AllHtmlEntities.decode(questions.data.results[questionIndex].question) }\n          </Card>\n          <ButtonsGroup>\n            <Button answer={true} onClick={() => setAnswer(true)}>\n              True\n            </Button>\n            <Button answer={false} onClick={() => setAnswer(false)}>\n              False\n            </Button>\n          </ButtonsGroup>\n          <Breadcrumb>{`${questionIndex + 1} / ${questionsLength}`}</Breadcrumb>\n        </>\n       }\n      </Content>\n      }\n    </>  \n  )\n}\n\nexport default Quiz","import styled from 'styled-components';\n\nconst AnswersList = styled.ul`\n  list-style: none;\n  padding: 0;\n\n  span {\n    font-size: 30px;\n    margin-right: 15px;\n    font-weight: bold\n  }\n`;\n\nconst AnswerItem = styled.li`\n  display: flex;\n  line-height: 30px;\n  font-size: 15px;\n  letter-spacing: 0.5px;\n  border-bottom: 1px solid rgb(255 255 255 / 13%);\n  color: ${props => props.color};\n`;\n\nexport {\n  AnswersList,\n  AnswerItem\n}\n","/**\n * Action Types\n */\nexport enum ResetTypes {\n  RESET_GAME = '@reset/RESET_GAME'\n}\n\n/**\n * State Type\n */\nexport interface Resetstate {\n  reset: boolean\n}\n","import { action } from \"typesafe-actions\"\nimport { ResetTypes } from \"./types\"\n\nexport const setReset = () => action(ResetTypes.RESET_GAME)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AllHtmlEntities } from 'html-entities'\nimport { useHistory } from \"react-router-dom\"\n\nimport Headline from '../../components/Headline'\nimport Button from '../../components/Button'\nimport { AnswersList, AnswerItem } from './result.styles'\n\nimport * as PlayAgainActions from '../../store/ducks/playAgain/actions'\nimport { Answers } from '../../store/ducks/answers/types'\nimport { ApplicationState } from '../../store'\n\nconst Result = () => {\n  const history = useHistory()\n\n  const dispatch = useDispatch();\n\n  const { answers } = useSelector((state: ApplicationState) => ({\n    answers: state.answers.data,\n  }));\n\n  const quantityCorrect = answers.AnswersResult.filter( answer => answer.correct === true).length\n\n  const playAgain = () => {\n    dispatch(PlayAgainActions.setReset())\n    history.push(`/`);\n  }\n\n  return (\n    <>\n      <Headline>\n        You scored {`${quantityCorrect}`}/10\n      </Headline>\n      <AnswersList>\n        {answers && answers.AnswersResult.map(( answer: Answers ) => (\n          <AnswerItem key={answer.question} color={answer.correct ? 'var(--green)' : 'var(--red)'}>\n            <span>{answer.correct ? '+' : '-'}</span> \n            { AllHtmlEntities.decode(answer.question) }\n          </AnswerItem>\n        ))}\n      </AnswersList>\n      <Button onClick={() => playAgain()}>\n        Play again?\n      </Button>\n    </>  \n  )\n}\n\nexport default Result","import React from 'react'\nimport { Route, Switch, Router } from 'react-router-dom'\nimport { createBrowserHistory } from \"history\"\nimport Home from '../pages/Home'\nimport Quiz from '../pages/Quiz'\nimport Result from '../pages/Result'\n\nconst history = createBrowserHistory()\n\nconst Routes = () => (\n  <Router history={history}>\n    <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/quiz\" exact  component={Quiz} />\n        <Route path=\"/result\" exact  component={Result} />\n    </Switch>\n  </Router>\n)\n\nexport default Routes\n","import Routes from './routes'\n\nexport default Routes","import { Reducer } from \"redux\"\nimport { QuestionsState, QuestionsTypes } from \"./types\"\n\nconst INITIAL_STATE: QuestionsState = {\n  data: {\n    responseCode: 0,\n    results: []\n  },\n  loadingQuestions: false\n}\n\nconst reducer: Reducer<QuestionsState> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case QuestionsTypes.GET_QUESTIONS_REQUEST:\n      return { ...state, loadingQuestions: true }\n    case QuestionsTypes.GET_QUESTIONS_SUCCESS:\n      return {\n        ...state,\n        loadingQuestions: false,\n        data: action.payload.data\n      }\n    case QuestionsTypes.GET_QUESTIONS_FAILURE:\n      return { ...state, loadingQuestions: false }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { Reducer } from \"redux\"\nimport { AnswerState, AnswersTypes } from \"./types\"\n\nconst INITIAL_STATE: AnswerState = {\n  data: {\n    AnswersResult: []\n  },\n  loadingAnswers: false\n}\n\nconst reducer: Reducer<AnswerState> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case AnswersTypes.GET_ANSWERS:\n      return { \n        ...state, \n        loadingAnswers: true \n      }\n    case AnswersTypes.SET_ANSWERS:\n      return {\n        ...state,\n        loadingAnswers: false,\n        data: {\n          AnswersResult: action.payload\n        }\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { Reducer } from \"redux\"\nimport { Resetstate, ResetTypes } from \"./types\"\n\nconst INITIAL_STATE: Resetstate = {\n  reset: false\n}\n\nconst reducer: Reducer<Resetstate> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ResetTypes.RESET_GAME:\n      return {...state}\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { combineReducers } from \"redux\"\n\nimport questions from \"./questions\"\nimport answers from \"./answers\"\nimport playAgain from \"./playAgain\"\n\nconst createRootReducer = () => combineReducers({\n  questions,\n  answers,\n  playAgain\n})\n\nexport default createRootReducer\n","import axios from \"axios\"\n\nconst baseApiURL = \"https://opentdb.com/api.php\"\n\nconst api = axios.create({\n  baseURL: baseApiURL\n})\n\nexport default api\n","import http from \"./api\"\n\nconst QuestionsService = {\n  getQuestions: () => http.get('?amount=10&difficulty=hard&type=boolean')\n}\n\nexport default QuestionsService\n\n","import { call, put } from \"redux-saga/effects\"\n\nimport { loadQuestionsSuccess, loadQuestionsFailure } from \"./actions\"\nimport { QuestionsResponse } from \"./types\"\n\nimport QuestionsService from \"../../../services/questions-service\"\n\nexport function* getQuestions() {\n  try {\n    const response: QuestionsResponse = yield call(QuestionsService.getQuestions)\n    yield put(loadQuestionsSuccess(response))\n  } catch (err) {\n  \n    console.log(err)\n    yield put(loadQuestionsFailure())\n  }\n}\n","import { all, takeLatest } from \"redux-saga/effects\"\n\nimport { QuestionsTypes } from \"./questions/types\"\nimport { getQuestions } from \"./questions/sagas\"\n\nexport default function* rootSaga() {\n  return yield all([\n    takeLatest(QuestionsTypes.GET_QUESTIONS_REQUEST, getQuestions),\n  ])\n}\n","import { createStore, Store, applyMiddleware, compose } from \"redux\"\nimport createSagaMiddleware from \"redux-saga\"\n\nimport createRootReducer from './ducks/rootReducer'\nimport rootSaga from \"./ducks/rootSaga\"\n\nimport { QuestionsState } from \"./ducks/questions/types\"\nimport { AnswerState } from \"./ducks/answers/types\"\nimport { Resetstate } from \"./ducks/playAgain/types\"\n\nexport interface ApplicationState {\n  questions: QuestionsState\n  answers: AnswerState\n  playAgain: Resetstate\n}\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\n  }\n}\n\nconst sagaMiddleware = createSagaMiddleware()\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst middlewares = [\n  sagaMiddleware\n]\n\nconst store: Store<ApplicationState> = createStore(\n  createRootReducer(),\n  composeEnhancers(applyMiddleware(...middlewares))\n)\n\nsagaMiddleware.run(rootSaga)\n\nexport default store\n","import React from 'react'\nimport { GlobalStyle, Main } from './App.styles'\nimport Routes from './routes'\n\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Main>\n        <GlobalStyle />\n        <Routes />\n      </Main>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}